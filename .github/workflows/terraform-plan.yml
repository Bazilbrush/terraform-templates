name: Terraform Plan

on: 
  workflow_call:
    inputs:
        tfpath:
            description: 'TF File Path'    
            type: string 
            required: true
            default: 'infra'
        TF_ENV:
            description: 'terraform environment'
            type: string
            required: true
            default: 'test'
        PAT:
            description: 'encryption password'
            type: string
            required: false
            default: 'test'
        backend-platform: 
            description: 'cloud providerfor backend'
            type: string
            default: azure
        AWS_OIDC_ROLE:
            description: 'OIDC role to assume for authentication in AWS'
            type: string
            default: ''
        AWS_OIDC_SESSION_NAME:
            description: 'Role session name for oidc conneciton' #do we need this?
            type: string
            default: ''
        AWS_REGION:
            description: 'aws region'
            type: string
            required: false
            default: 'eu-west-1'
        # aws backend
        AWS_BUCKET:
            description: 'backend bucket name'
            type: string
            required: false
            default: jackbazbackend
  
        # azure bckend
        AZ_RG_NAME:
            description: 'resource group name'
            type: string
            required: false
            default: ''
        AZ_STORAGE_ACC:
            description: 'storage account name'
            type: string
            required: false
            default: ''
        AZ_STORAGE_CONTAINER:
            description: 'storage container name'
            type: string
            required: false
            default: ''
        BACKEND_KEY:
            description: 'backend file key' #they can be the same for aws and azure not sure on glcoud
            type: string
            required: true
            default: default.tfstate

        pre_tasks:
            required: false
            type: string
        post_tasks:
            required: false
            type: string
    secrets:
            # Azure vars
        ARM_CLIENT_ID:
            description: 'service principal id'
            required: false
        ARM_CLIENT_SECRET:
            description: 'service principal secret'
            required: false
        ARM_SUBSCRIPTION_ID:
            description: 'sub id'
            required: false
        ARM_TENANT_ID:
            description: 'tenant id'
            required: false
        INFRACOST_API_KEY:
            description: 'infra cost api key'
            required: false

permissions:
    id-token: write
    contents: read
        
jobs:
    tf_plan:
        name: Terraform Plan
        runs-on: ubuntu-latest
    
        if:  ${{ inputs.tfpath }} 
        steps:
        - uses: actions/checkout@v2.5.0

        # Optional extra steps (passed in as JSON or YAML string)
        - name: Run extra steps before terraform
          if: ${{ inputs.pre_tasks != '' }}
          run: |
            echo "${{ inputs.pre_tasks }}" > pre_steps.yml
            yq eval '.steps' pre_steps.yml | tee dynamic-pre-steps.yml

        - name: Setup Terraform CLI
          uses: hashicorp/setup-terraform@v2.0.2
          with: 
            terraform_version: 1.12.0  # yes we wanna hardcode this as we dont want people setting their own

        - name: configure aws credentials
          if: ${{ inputs.AWS_OIDC_ROLE }}
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ inputs.AWS_OIDC_ROLE }}
            role-session-name: ${{ inputs.AWS_OIDC_SESSION_NAME }}
            aws-region: ${{ inputs.AWS_REGION }}

        - name: Get OIDC Token  
          if: ${{ inputs.AWS_OIDC_ROLE }}    
          id: get_oidc_token      
          run: |         
            curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value' > /tmp/web_identity_token_file
    
        - name: Terraform Plan
          working-directory: ${{ github.event.inputs.tfpath }}
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          run: |
            echo `pwd`
            echo "tfpath ${{ github.event.inputs.tfpath }}"
            echo "** Running Terraform Init**"
            if [ "${{ inputs.backend-platform }}" == "azure" ]; then
                echo running in ${{ inputs.backend-platform }}
                terraform init -backend-config="resource_group_name=${{ inputs.AZ_RG_NAME }}" -backend-config="storage_account_name=${{ inputs.AZ_STORAGE_ACC }}" -backend-config="container_name=${{ inputs.AZ_STORAGE_CONTAINER }}" -backend-config="key=${{ inputs.BACKEND_KEY }}"
            elif [ "${{ inputs.backend-platform }}" == "aws" ]; then
                echo running in ${{ inputs.backend-platform }}
                terraform init -backend-config="bucket=${{ inputs.AWS_BUCKET }}" -backend-config="key=${{ inputs.BACKEND_KEY }}" -backend-config="region=${{ inputs.AWS_REGION }}"
            fi
            terraform workspace select ${{ inputs.TF_ENV }} || terraform workspace new ${{ inputs.TF_ENV }}
            echo "** Running Terraform Plan**"
            terraform plan -input=false -var-file="${{ inputs.TF_ENV }}.tfvars" -out=create-${{ inputs.TF_ENV }}.tfplan


        #- name: Setup Infracost
        #  uses: infracost/actions/setup@v2
            # See https://github.com/infracost/actions/tree/master/setup for other inputs
            # If you can't use this action, see Docker images in https://infracost.io/cicd
        #  with:
         #   api-key: ${{ secrets.INFRACOST_API_KEY }}

        # Generate Infracost JSON file as the baseline.
       # - name: Generate Infracost cost estimate baseline
        #  run: |
         #   infracost breakdown --path=${{ inputs.tfpath }} \
          #                  --format=table \

        # Optional extra steps (passed in as JSON or YAML string)
        - name: Run extra steps after terraform
          if: ${{ inputs.post_tasks != '' }}
          run: |
            echo "${{ inputs.post_tasks }}" > post_steps.yml
            yq eval '.steps' post_steps.yml | tee dynamic-post-steps.yml                   
    
        - name: encrypt TF dir
          run: |
            ls -al ${{ inputs.tfpath }} 
            7z a create-${{ inputs.TF_ENV }}-dir.7z -mx0 -p${{ inputs.PAT }} ${{ inputs.tfpath }}/.terraform ${{ inputs.tfpath }}/create-${{ inputs.TF_ENV }}.tfplan ${{ inputs.tfpath }}/.terraform.lock.hcl
            ls -al

        - uses: actions/upload-artifact@master
          with:
            name: create-${{ inputs.TF_ENV }}-dir
            path: create-${{ inputs.TF_ENV }}-dir.7z
